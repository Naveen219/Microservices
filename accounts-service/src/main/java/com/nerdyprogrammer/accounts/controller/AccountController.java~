package com.nerdyprogrammer.accounts.controller;

import com.nerdyprogrammer.accounts.constants.AccountConstants;
import com.nerdyprogrammer.accounts.dto.CustomerDto;
import com.nerdyprogrammer.accounts.dto.ResponseDto;
import com.nerdyprogrammer.accounts.entity.Account;
import com.nerdyprogrammer.accounts.service.IAccountsService;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Pattern;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

import static com.nerdyprogrammer.accounts.constants.AccountConstants.MESSAGE_200;
import static com.nerdyprogrammer.accounts.constants.AccountConstants.STATUS_200;

@RestController
@RequestMapping(path = "/api", produces = {MediaType.APPLICATION_JSON_VALUE})
@RequiredArgsConstructor
@Validated
public class AccountController {


    private final IAccountsService accountsService;


    @PostMapping("/create")
    public ResponseEntity<ResponseDto> createAccount(@Valid @RequestBody CustomerDto customerDto) {
        accountsService.createAccount(customerDto);
        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(new ResponseDto(STATUS_200, MESSAGE_200));
    }

    /**
     *
     * @param mobileNumber
     * @return AccountDetails for a given mobile number
     */
    @GetMapping("/get")
    public ResponseEntity<CustomerDto> getAccountDetails(@RequestParam @Valid
                                                             @Pattern(regexp = "(^$|[0-9]{10})",
                                                                     message = "Mobile number should be 10 digits" )
                                                             String mobileNumber) {
        CustomerDto response = accountsService.getAccountDetails(mobileNumber);
        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    /**
     *
     * @param customerDto
     * @return updates customer details and accountDetails for a given account number
     */

    @PutMapping("/update")
    public ResponseEntity<ResponseDto> updateAccountDetails(@Valid @RequestBody CustomerDto customerDto) {
        boolean isUpdated =  accountsService.updateAccount(customerDto);
        if (isUpdated) {
            return ResponseEntity
                    .status(HttpStatus.OK)
                    .body(new ResponseDto(STATUS_200, MESSAGE_200));
        }
        else {
            return ResponseEntity
                    .status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ResponseDto(AccountConstants.STATUS_500, AccountConstants.MESSAGE_500));
        }

    }
    @DeleteMapping("/delete")
    public ResponseEntity<ResponseDto> deleteAccountDetails(@RequestParam @Valid
                                                                @Pattern(regexp = "(^$|[0-9]{10})",
                                                                        message = "Mobile number should be 10 digits")
                                                                String mobileNumber) {
        boolean isUpdated = accountsService.deleteAccount(mobileNumber);
        if (isUpdated) {
            return ResponseEntity
                    .status(HttpStatus.OK)
                    .body(new ResponseDto(STATUS_200, MESSAGE_200));
        }
        else {
            return ResponseEntity
                    .status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ResponseDto(AccountConstants.STATUS_500, AccountConstants.MESSAGE_500));
        }

    }
}
