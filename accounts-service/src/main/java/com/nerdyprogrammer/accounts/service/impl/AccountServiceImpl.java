package com.nerdyprogrammer.accounts.service.impl;

import com.nerdyprogrammer.accounts.constants.AccountConstants;
import com.nerdyprogrammer.accounts.dto.CustomerDto;
import com.nerdyprogrammer.accounts.entity.Account;
import com.nerdyprogrammer.accounts.entity.Customer;
import com.nerdyprogrammer.accounts.exceptions.CustomerAlreadyExistsException;
import com.nerdyprogrammer.accounts.mapper.CustomerMapper;
import com.nerdyprogrammer.accounts.repository.AccountRepository;
import com.nerdyprogrammer.accounts.repository.CustomerRepository;
import com.nerdyprogrammer.accounts.service.IAccountsService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.Random;

@Service
// by default allows constructor injection for all the final fields
@RequiredArgsConstructor
public class AccountServiceImpl implements IAccountsService {

    private final AccountRepository accountRepository;

    private final CustomerRepository customerRepository;

    @Override
    public void createAccount(CustomerDto customerDto) {
        Customer customer = CustomerMapper.toCustomer(customerDto);
        Optional<Customer> customerOptional = customerRepository.findByMobileNumber(customer.getMobileNumber());
        if (customerOptional.isPresent()) {
             throw new CustomerAlreadyExistsException("Customer already registered with the given mobile number "
                     + customer.getMobileNumber());
        }
        Customer savedCustomer = customerRepository.save(customer);
        accountRepository.save(createNewAccount(savedCustomer));

    }

    private Account createNewAccount(Customer customer) {
        Account newAccount = new Account();
        // customerId gets generated by spring data jpa before persisting the customer entity
        newAccount.setCustomerId(customer.getCustomerId());
        long randomAccNumber = 10000000L * new Random().nextInt(90000);

        newAccount.setAccountNumber(randomAccNumber);
        newAccount.setAccountType(AccountConstants.SAVINGS);
        newAccount.setBranchAddress(AccountConstants.ADDRESS);
        return newAccount;
    }
}
