package com.nerdyprogrammer.accounts.service.impl;

import com.nerdyprogrammer.accounts.constants.AccountConstants;
import com.nerdyprogrammer.accounts.dto.AccountDto;
import com.nerdyprogrammer.accounts.dto.CustomerDto;
import com.nerdyprogrammer.accounts.entity.Account;
import com.nerdyprogrammer.accounts.entity.Customer;
import com.nerdyprogrammer.accounts.exception.CustomerAlreadyExistsException;
import com.nerdyprogrammer.accounts.exception.ResourceNotFoundException;
import com.nerdyprogrammer.accounts.mapper.AccountMapper;
import com.nerdyprogrammer.accounts.mapper.CustomerMapper;
import com.nerdyprogrammer.accounts.repository.AccountRepository;
import com.nerdyprogrammer.accounts.repository.CustomerRepository;
import com.nerdyprogrammer.accounts.service.IAccountsService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.Objects;
import java.util.Optional;
import java.util.Random;

@Service
// by default allows constructor injection for all the final fields
@RequiredArgsConstructor
public class AccountServiceImpl implements IAccountsService {

    private final AccountRepository accountRepository;

    private final CustomerRepository customerRepository;


    @Override
    public boolean updateAccount(CustomerDto customerDto) {
        boolean isUpdated = false;
        AccountDto accountDto = customerDto.getAccountDto();
        if (Objects.nonNull(accountDto)) {
            Account account = accountRepository.findById(accountDto.getAccountNumber())
                    .orElseThrow(() -> new ResourceNotFoundException("Account", "accountNumber", accountDto.getAccountNumber().toString()));
            AccountMapper.toAccount(accountDto, account);
            account = accountRepository.save(account);
            Long customerId = account.getCustomerId();
            Customer customer = customerRepository.findById(customerId)
                    .orElseThrow(() -> new ResourceNotFoundException("Customer", "customerId", customerId.toString()));
            customer = CustomerMapper.toCustomer(customerDto, customer);
            customerRepository.save(customer);
            isUpdated = true;
        }
        return isUpdated;
    }

    @Override
    public void createAccount(CustomerDto customerDto) {
        Customer customer = CustomerMapper.toCustomer(customerDto, new Customer());
        Optional<Customer> customerOptional = customerRepository.findByMobileNumber(customer.getMobileNumber());
        if (customerOptional.isPresent()) {
            throw new CustomerAlreadyExistsException("Customer already registered with the given mobile number "
                    + customer.getMobileNumber());
        }
        Customer savedCustomer = customerRepository.save(customer);
        accountRepository.save(createNewAccount(savedCustomer));

    }

    @Override
    public boolean deleteAccount(String mobileNumber) {
        Customer customer = customerRepository.findByMobileNumber(mobileNumber)
                .orElseThrow(() -> new ResourceNotFoundException("Customer", "mobileNumber", mobileNumber));
        accountRepository.deleteByCustomerId(customer.getCustomerId());
        customerRepository.deleteById(customer.getCustomerId());
        return true;
    }

    @Override
    public CustomerDto getAccountDetails(String mobileNumber) {
        Customer customer = customerRepository.findByMobileNumber(mobileNumber)
                .orElseThrow(() -> new ResourceNotFoundException("Customer", "mobileNumber", mobileNumber));
        Account account = accountRepository.findByCustomerId(customer.getCustomerId())
                .orElseThrow(() -> new ResourceNotFoundException("Account", "customerId", customer.getCustomerId().toString()));
        CustomerDto customerDto = CustomerMapper.toCustomerDto(customer, new CustomerDto());
        AccountDto accountDto = AccountMapper.toAccountDto(account, new AccountDto());
        customerDto.setAccountDto(accountDto);
        return customerDto;
    }

    private Account createNewAccount(Customer customer) {
        Account newAccount = new Account();
        // customerId gets generated by spring data jpa before persisting the customer entity
        newAccount.setCustomerId(customer.getCustomerId());
        long randomAccNumber = 10000000L * new Random().nextInt(90000);

        newAccount.setAccountNumber(randomAccNumber);
        newAccount.setAccountType(AccountConstants.SAVINGS);
        newAccount.setBranchAddress(AccountConstants.ADDRESS);
        return newAccount;
    }
}
